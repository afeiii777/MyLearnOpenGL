#version 330 core

out vec4 FragColor;

in vec2 TexCoord;
in vec3 FragPos;
in vec3 Normal;

struct Light{
    vec3 env;
    vec3 diffuse;
    vec3 specular;
    vec3 position;
};

struct Material {
    vec3 env;
    vec3 diffuse;
    vec3 specular;    
    float shineValue;
}; 

uniform sampler2D texture1;
uniform sampler2D texture2;
uniform vec3 viewPos;
uniform Light light;
uniform Material material;

void main()
{

    vec3 env = light.env * material.env;

    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diffuseValue = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diffuseValue * material.diffuse;

    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    float specValue = pow(max(dot(viewDir, reflectDir), 0.0), material.shineValue);
    vec3 specular = light.specular * specValue * material.specular;
    
    FragColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord) * 2 , 0.2) * 
    vec4(env  + diffuse + specular, 1.0);
}